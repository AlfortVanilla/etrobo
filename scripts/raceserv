#!/usr/bin/env bash
#
# raceserv, ET robocon race server
#   raceserv 
# Author: jtFuruhata
# Copyright (c) 2020-2022 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#
# fp0 ... 2022/07/17 13:00～2022/07/17 16:00
# fp1 ... 2022/07/25 10:00～2022/07/31 20:00
# fp2 ... 2022/08/29 10:00～2022/09/08 20:00
#

#
# prepare simvm : create 'simvm.sh' into 'dist/'
# Usage: raceserv <basecampName> /path/to/raceFolder [/path/to/relayFolder]
# run before starting the simvm for each free practices or competitions
#
if [ "$1" == "prepare" ]; then
    target="$ETROBO_ROOT/dist/simvm.sh"
    if [ -f "$target" ]; then
        rm -f "$target"
    fi
    echo "create $target"
    echo "export ETROBO_BASECAMP=\"$2\"" | tee "$target"
    echo "export ETROBO_RACE=\"$3\"" | tee "$target"
    echo "export ETROBO_RELAY=\"$3\"" | tee "$target"
    echo "if [ -n \"$4\" ]; then" | tee "$target"
    echo "    export ETROBO_RELLAY=\"$4\"" | tee "$target"
    echo "fi" | tee "$target"
fi

if [ -n "$dummy" ];
fi
# ToDo:
#   You should make symbolick link to relayFolder/Requests and relayFolder/Results from raceFolder.
#       sudo mount -t drvfs <WindowsDriveLetter>: "$mountPath"
#       ln -s /path/to/relayFolder/Requests /path/to/raceFolder/Requests
#       ln -s /path/to/relayFolder/Results /path/to/raceFolder/Results
#
#   To export CSV and movie files, you also should make these folder and symbolick link to there.
#       mkdir /path/to/relayFolder/common
#       mkdir /path/to/relayFolder/common/csv
#       mkdir /path/to/relayFolder/common/raceserv
#       mkdir /path/to/relayFolder/common/matchmaker
#       ln -s /path/to/relayFolder/common /path/to/raceFolder/common

#
# define error codes
#
ERR_OK=0
ERR_ERR=1
ERR_ARC_PROJECT_NOT_FOUND=101
ERR_ARC_COPY_FAILED=102
ERR_ARC_FILE_NOT_FOUND=103
ERR_ARC_ZIP_FAILED=104
ERR_ARC_ZIP_TOO_LARGE=105
ERR_SEQ_RACEFOLDER_NOT_FOUND=201
ERR_SEQ_UNZIP_FAILED=202
ERR_SEQ_RACE_NOT_FOUND=203
ERR_SEQ_ASP_NOT_FOUND=204
ERR_SEQ_MD5SUM_MISMATCH=205
ERR_SEQ_REQUESTS_EMPTY=206
ERR_SEQ_SIM_LAUNCH_FAILED=207
ERR_SEQ_FFMPEG_FAILED=208
ERR_SEQ_ZIP_FAILED=209
ERR_SEQ_TOO_MANY_FILES=210

exit_code=ERR_OK

#
# `ver=<version>` option selects version of UnityETroboSim
#
unset sim_ver
if [ -n "`echo $1 | grep ^ver=`" ]; then
    sim_ver="ver=`echo $1 | grep ^ver= | sed -E 's/^ver=(.*)$/\1/'`"
    shift
fi

unset vm
if [ "$1" == "vm" ]; then
    vm="vm"
    shift
fi

# recognize matchmaker option
unset matchmaker
if [ "$1" == "matchmaker" ] || [ "$1" == "flying" ]; then
    matchmaker="$1"
    shift
fi

if [ -n "$2" ] && [ "$1" == "fp0" ] || [ "$1" == "fp1" ] || [ "$1" == "fp2" ] || [ "$1" == "fpcs" ] || [ "$1" == "finals" ] || [ "$1" == "csfinal" ];then
    # prepare race folder
    mode="$1"
    raceFolder="$2"
    relayFolder="$raceFolder"
    if [ -n "$3" ]; then
        relayFolder="$3"
    fi
    if [ -n "$vm" ]; then
        raceDrive="`echo \"$raceFolder\" | sed -E 's/^(\/mnt\/.*)\/.*$/\1/'`"
        relayDrive="`echo \"$relayFolder\" | sed -E 's/^(\/mnt\/.*)\/.*$/\1/'`"
        #
        # ToDo:
        #   mount drives in vm
        #
    fi
    rm -f "$raceFolder/"*.manifest
    cd "$raceFolder"
    rm -f left
    rm -f right
    rm -f ERROR
    rm -f ZIP
    rm -f END
    rm -f waiting

    asp stop
    asp deep stop

    # launch taskscheduler for ETroboSimRunner.Relay
    if [ -n "$vm" ]; then
        ETroboSimRunner.Relay.sh serv "$raceFolder" "$relayFolder" &
        trap "touch stop_relay" EXIT
    fi

    #
    # server main loop
    #
    # to stop server safely, `touch stop` on race folder
    #
    unset course
    main_loop="loop"
    while [ -n "$main_loop" ]; do
        echo
        echo "[ raceserv: waiting for Requests ]"
        wait_loop="loop"
        while [ -n "$wait_loop" ]; do
            sleep 1
            # raceserv stop
            if [ -f "$raceFolder/stop" ]; then
                rm -f "$raceFolder/stop"
                unset wait_loop
                unset main_loop
            fi
            # wait requests
            if [ "$matchmaker" == "matchmaker" ]; then
                if [ -f "$raceFolder/left" ]; then
                    course="left"
                elif [ -f "$raceFolder/right" ]; then
                    course="right"
                fi
            else
                course="auto"
            fi

            if [ -n "$course" ]; then
                ls="`ls \"$relayFolder/Requests\" | grep -v ^cancel_ 2>&1`"
                ls "$relayFolder/Requests" | grep -v ^cancel_ > /dev/null 2>&1 
                if [ "$?" == "0" ] && [ -n "$ls"  ]; then
                    unset wait_loop
                fi
            fi
        done
        if [ -n "$main_loop" ]; then
            #
            # invoke race
            #
            if [ -n "$matchmaker" ]; then
                race $sim_ver $matchmaker $mode auto $course "$raceFolder"
                race_error="$?"
            else
                race $sim_ver $mode "$raceFolder"
                race_error="$?"
            fi

            # get zip filename from manifest
            manifest="`ls \"$raceFolder\" | grep .manifest$`"
            zipname="`echo $manifest | sed -E 's/^(.*).manifest/\1/'`"
            if [ "$?" == "$ERR_OK" ] && [ "$race_error" != "ERR_SEQ_ZIP_FAILED" ]; then
                # put ERROR.txt into zip file 
                if [ "$race_error" != "$ERR_OK" ]; then
                    case "$race_error" in
                        "$ERR_SEQ_UNZIP_FAILED" ) 
                            mes="illegal zip file: unzip failed. you should run 'race zip'." ;;
                        "$ERR_SEQ_RACE_NOT_FOUND" ) 
                            mes="illegal zip file: __race folder not found. you should run 'race zip'." ;;
                        "$ERR_SEQ_ASP_NOT_FOUND" ) 
                            mes="illegal zip file: .asp file not found. you should run 'make app=<projName> sim up' first." ;;
                        "$ERR_SEQ_TOO_MANY_FILES" ) 
                            mes="illegal zip file: too many files in __ev3rtfs/_r. you should reduce file counts less than 256." ;;
                        "$ERR_SEQ_MD5SUM_MISMATCH" ) 
                            mes="illegal zip file: MD5 check sum mismatched. you should run 'update' first." ;;
                        "$ERR_SEQ_FFMPEG_FAILED" ) 
                            mes="video encode error: This error appears when your HackEV did flying-start." ;;
                        * ) 
                            mes="an error has occured while this race." ;;
                    esac

                    echo "[ raceserv: ERROR: $mes ]"
                    echo "$mes" > ERROR.txt
                    zip $zipname ERROR.txt > /dev/null
                    cp -f $zipname "$relayFolder/Results/"
                    rm $zipname
                    rm ERROR.txt
                fi
            else
                echo "[ raceserv: WARNING : result zip file creation failed!!! ]"
            fi

            # request post and get via ETroboSimRunner.Relay
            if [ -n "$vm" ]; then
                ETroboSimRunner.Relay.sh "$raceFolder" "$relayFolder"
            fi
        fi
        rm -f "$raceFolder/"*.manifest
    done
else
    echo "usage: raceserv [ver=<SIM_VER>] [vm] [matchmaker|flying] fp1|fp2|fpcs|finals|csfinal /path/to/raceFolder [/path/to/relayFolder]" 
    echo "       raceserv prepare <basecampName> /path/to/raceFolder [/path/to/relayFolder]"
fi
