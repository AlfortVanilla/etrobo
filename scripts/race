#!/usr/bin/env bash
#
# race, ET robocon race sequencer, file archiver (and uploader)
#   race 
# Author: jtFuruhata
# Copyright (c) 2020 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#
if [ "$1" == "usage" ] || [ "$1" == "--help" ]; then
    echo "Usage: race [MODE] [CLASS] [COURSE] [</path/to/raceFolder>] [<projName>]"
    echo
    echo "The ET robocon race sequencer, file archiver (and uploader)"
    echo
    echo "The race folder contains 'Requests' and 'Results' folder."
    echo "This race sequencer gets a .zip file that timestamp is the oldest one"
    echo "from 'Requests' folder and makes competition automatically."
    echo "After that, race result files are zipped into 'Results' folder as"
    echo "same .zip filename."
    echo "If COURSE option is specified, this sequencer launches one of"
    echo "'l_/r_<projName>.asp' files depending on specified course."
    echo
    echo "On 'zip' or 'upload' mode, this archiver creates a upload.zip file from"
    echo "'\$ETROBO_HRP3_WORKSPACE/simdist/<projName>' into the race folder."
    echo "If COURSE option is specified, this archiver rewrites L/RHackEV value"
    echo "on 'settings.json' to specified course."
    echo
    echo "  MODE Options:  (default: 'get')"
    echo "    get    ... get a .zip file from the race folder"
    echo "    pop    ... get a .zip file from the race folder and *DELETE* it"
    echo "    zip    ... create a .zip file for 'Requests' into the race folder"
    echo "    upload ... (Reserved Feature) create a .zip file and upload"
    echo "    fp1    ... (Reserved Feature) run as Free Practice 1 daemon"
    echo "    fp2    ... (Reserved Feature) run as Free Practice 2 daemon"
    echo "    final  ... (Reserved Feature) run as Championship Final daemon"
    echo
    echo "  CLASS Options:  (default: 'auto')"
    echo "    auto   ... choose in depending on filename prefix"
    echo "               if no classes are prefixed, choose specified class"
    echo "               in settings.json"
    echo "               if there aren't exists, choose 'entry' class"
    echo "    advanced . choose 'advanced' class (or 'A_' prefixed .zip file)"
    echo "    primary .. choose 'primary' class  (or 'P_' prefixed .zip file)"
    echo "    entry  ... choose 'entry' class    (or 'E_' prefixed .zip file)"
    echo "    sample ... choose 'sample' course  (or 'S_' prefixed .zip file)"
    echo
    echo "  COURSE Options:  (default: 'auto')"
    echo "    auto   ... specified course in settings.json"
    echo "               if there aren't exists, choose 'left' course"
    echo "    left   ... choose 'left' course"
    echo "    right  ... choose 'right' course"
    echo
    echo "  If CLASS or COURSE option is specified, etclass/L_HackEV/R_HackEV"
    echo "  in settings.json will be rewritten in depending on options."
    echo
    echo "  </path/to/raceFolder> can specifies a *ABSOLUTE* path"
    echo "                        to the race folder."
    echo "  (default on Windows: '%USERPROFILE%\etrobosim\_race\')"
    echo "  (default on others:  '\$ETROBO_HRP3_WORKSPACE/simdist/_race/')"
    echo
    echo "  On 'zip' or 'update' mode, <projName> can specifies a project name."
    echo "  (default: current app)"
    echo "  Both ('l_' prefixed) left and ('r_' prefixed) right apps are"
    echo "  archived into .zip file regardless of COURSE specification."
    echo "  This archiver will use a non-prefixed .asp file if there are"
    echo "  not 'l_'/'r_' prefixed files."
    echo
    exit 0
fi

#
# define error codes
#
ERR_OK=0
ERR_ERR=1
ERR_ARC_PROJECT_NOT_FOUND=101
ERR_ARC_COPY_FAILED=102
ERR_ARC_FILE_NOT_FOUND=103
ERR_ARC_ZIP_FAILED=104
ERR_ARC_ZIP_TOO_LARGE=105
ERR_SEQ_RACEFOLDER_NOT_FOUND=201
ERR_SEQ_UNZIP_FAILED=202
ERR_SEQ_RACE_NOT_FOUND=203
ERR_SEQ_ASP_NOT_FOUND=204
ERR_SEQ_MD5SUM_MISMATCH=205
ERR_SEQ_REQUESTS_EMPTY=206
ERR_SEQ_SIM_LAUNCH_FAILED=207
ERR_SEQ_FFMPEG_FAILED=208
ERR_SEQ_ZIP_FAILED=209

exit_code=$ERR_OK

#
# `ver=<version>` option selects version of UnityETroboSim
#
unset sim_ver
opt="$1"
if [ -n "`echo $opt | grep ^ver=`" ]; then
    sim_ver="ver `echo $1 | grep ^ver= | sed -E 's/^ver=(.*)$/\1/'`"
    shift
fi

#
# get options
#
mode="get"
if [ "$1" = "get" ] || [ "$1" = "pop" ] || [ "$1" = "zip" ] || [ "$1" = "upload" ] \
|| [ "$1" = "fp1" ] || [ "$1" = "fp2" ] || [ "$1" = "final" ]; then
    mode="$1"
    shift
fi

class="auto"
if [ "$1" = "auto" ] || [ "$1" = "advanced" ] || [ "$1" = "primary" ] \
|| [ "$1" = "entry" ] || [ "$1" = "sample" ]; then
    class="$1"
    shift
fi

course="auto"
if [ "$1" = "auto" ] || [ "$1" = "left" ] || [ "$1" = "right" ]; then
    course="$1"
    shift
fi

#
# prepare envver for simdist, temporary and race folder
#
simdist="$ETROBO_HRP3_WORKSPACE/simdist"
raceFolder="$simdist"
if [ "$ETROBO_OS" == "win" ]; then
    raceFolder="$ETROBO_USERPROFILE/etrobosim"
fi
raceTemp="$simdist/__race"
raceFolder="$raceFolder/_race"
unset captureDir
if [ -n "`echo \"$1\" | grep ^\/`" ]; then
    raceFolder="$1"
    captureDir="$raceFolder/capture"
    shift
fi
if [ ! -d "$raceFolder" ]; then
    # race folder must be there
    # if it's on zip mode, make new folders
    if [ "$mode" == "zip" ] || [ "$mode" == "upload" ]; then
        mkdir -p "$raceFolder/Requests"
        mkdir -p "$raceFolder/Results"
    else
        echo "race sequencer: the race folder '$raceFolder' is not found."
        exit $ERR_SEQ_RACEFOLDER_NOT_FOUND
    fi
fi

#
# determine a project name
#
if [ -f "$ETROBO_HRP3_WORKSPACE/currentapp" ]; then
    projName=`cat "$ETROBO_HRP3_WORKSPACE/currentapp" | head -n 1 | sed -E "s/^app=|img=(.*)$/\1/"`
else
    projName="__race"
fi
if [ -n "$1" ]; then
    projName="$1"
    shift
fi
proj="$simdist/$projName"
if [ ! -d "$proj" ] && [ "$mode" == "zip" ] || [ "$mode" == "upload" ]; then
    echo "file archiver: project '$projName' is not found at '$simdist'."
    exit $ERR_ARC_PROJECT_NOT_FOUND
fi

#
# prepare __race temp folder in simdist
#
rm -rf "$raceTemp"
mkdir -p "$raceTemp"
cd "$simdist"
rm -f *.zip

if [ "$mode" == "zip" ] || [ "$mode" == "upload" ]; then
    #
    # file archiver
    #
    echo "file archiver: start"

    # prepare settings.json
    echo -n "file archiver: settings.json "
    if [ -f "$proj/settings.json" ]; then
        cp "$proj/settings.json" "$raceTemp/"
        if [ "$?" == "0" ]; then
            echo "is copied."
        else
            echo "ERROR while coping."
            exit $ERR_ARC_COPY_FAILED
        fi
    else
        echo "{}" > "$raceTemp/settings.json"
        echo "dummy is created."
    fi

    # prepare ev3rtfs
    echo -n "file archiver: __ev3rtfs "
    if [ -d "$proj/__ev3rtfs" ]; then
        cp -r "$proj/__ev3rtfs" "$raceTemp/"
        if [ "$?" == "0" ]; then
            echo "is copied."
        else
            echo "ERROR while coping."
            exit $ERR_ARC_COPY_FAILED
        fi
    else
        mkdir -p "$raceTemp/__ev3rtfs"
        echo "dummy is created."
    fi

    # prepare l_app
    echo -n "file archiver: Athrill app for Left course: "
    l_app="${projName}.asp"
    if [ -f "$proj/l_$l_app" ]; then
        l_app="l_$l_app"
    elif [ -n "`ls "$proj" | grep ^l_.*\.asp$`" ]; then
        l_app="`ls "$proj" | grep ^l_.*\.asp$ | head -n 1`"
    elif [ -f "$proj/$l_app" ]; then
        l_app="$l_app"
    elif [ -n "`ls "$proj" | grep -v ^l_ | grep -v ^r_ | grep ^.*\.asp$`" ]; then
        l_app="`ls "$proj" | grep -v ^l_ | grep -v ^r_ | grep ^.*\.asp$ | head -n 1`"
    else
        unset l_app
    fi
    if [ -n "$l_app" ];then
        cp -f "$proj/$l_app" "$raceTemp/l___race.asp"
        if [ "$?" == "0" ]; then
            echo "'$l_app' is copied as l___race.asp."
        else
            echo "ERROR while coping."
            exit $ERR_ARC_COPY_FAILED
        fi
    else
        echo "not found."
        exit $ERR_ARC_FILE_NOT_FOUND
    fi

    # prepare r_app
    echo -n "file archiver: Athrill app for Right course: "
    r_app="${projName}.asp"
    if [ -f "$proj/r_$r_app" ]; then
        r_app="r_$r_app"
    elif [ -n "`ls "$proj" | grep ^r_.*\.asp$`" ]; then
        r_app="`ls "$proj" | grep ^r_.*\.asp$ | head -n 1`"
    elif [ -f "$proj/$r_app" ]; then
        r_app="$r_app"
    elif [ -n "`ls "$proj" | grep -v l_ | grep -v r_ | grep ^.*\.asp$`" ]; then
        r_app="`ls "$proj" | grep -v l_ | grep -v r_ | grep ^.*\.asp$ | head -n 1`"
    else
        unset r_app
    fi
    if [ -n "$r_app" ];then
        cp -f "$proj/$r_app" "$raceTemp/r___race.asp"
        if [ "$?" == "0" ]; then
            echo "'$r_app' is copied as r___race.asp."
        else
            echo "ERROR while coping."
            exit $ERR_ARC_COPY_FAILED
        fi
    else
        echo "not found."
        exit $ERR_ARC_FILE_NOT_FOUND
    fi
    target="upload.zip"
else
    #
    # race sequencer 
    #
    target=`ls -tr "$raceFolder/Requests" | grep \.zip$ | head -n 1`
    if [ -n "$target" ]; then
        echo "race sequencer: get $target"
        touch "$raceFolder/${target}.manifest"
        cp "$raceFolder/Requests/$target" "$simdist"
        unzip -o $target > /dev/null
        unzip_error="$?"
        if [ "$mode" != "get" ]; then
            rm -f "$raceFolder/Requests/$target"
        fi
        if [ "$unzip_error" != "0" ]; then
            echo "race sequencer: UNZIP ERROR"
            exit $ERR_SEQ_UNZIP_FAILED
        fi
        rm "$simdist/$target"
        if [ ! -d __race ]; then
            echo "race sequencer: $target isn't contain '__race' folder."
            exit $ERR_SEQ_RACE_NOT_FOUND
        elif [ ! -f "__race/l___race.asp" ] || [ ! -f "__race/r___race.asp" ]; then
            echo "race sequencer: $target isn't contain '*___race.asp' file."
            exit $ERR_SEQ_ASP_NOT_FOUND
        fi
        if [ "$mode" != "get" ]; then
            rm -f "$raceFolder/Requests/$target"
        fi

        # calc md5sum
        unset sum
        if [ -f __race/__race.md5sum ]; then
            sum="`cat __race/__race.md5sum`"
            rm -f __race/__race.md5sum
        fi
        if [ "`(find __race -type f -exec md5sum -b {} \; && find __race) | env LC_ALL=C sort | md5sum -b`" != "$sum" ]; then
            echo "race sequencer: ERROR: mismatch md5sum"
            exit $ERR_SEQ_MD5SUM_MISMATCH
        fi
    else
        echo "race sequencer: Requests empty."
        exit $ERR_SEQ_REQUESTS_EMPTY
    fi
fi

#
# get settings.json
#
if [ -f __race/settings.json ]; then
    settings=`cat __race/settings.json | jq -c .`
    if [ -n "$settings" ]; then
        etclass=`echo "$settings" | jq -r .etclass`
        LHackEV=`echo "$settings" | jq -r .LHackEV`
        RHackEV=`echo "$settings" | jq -r .RHackEV`
        if [ -z "$captureDir" ]; then
            captureDir=`echo "$settings" | jq -r .captureDir`
            if [ -z "$captureDir" ] || [ "$captureDir" == "null" ]; then
                captureDir="$raceFolder/capture"
            fi
        fi
    else
        settings="{}"
        echo "[ race: WARNING: illiegal settings.json ]"
    fi
fi

# determine a capture directory and its Windows path
if [ -n "`echo $captureDir | grep ':\\\\'`" ]; then
    captureDir_winPath="$captureDir"
    captureDir="`echo \"$captureDir\" | sed -E 's/^(.{1}):.*$/\/mnt\/\L&/' | sed -E 's/://' | sed -E 's/\\\\/\//g'`"
else
    captureDir_winPath="`echo \"$captureDir\" | sed -E 's/^\/mnt\///' | sed -E 's/^(.{1})/\U&:/' | sed -E 's/\//\\\\\\\\/g'`"
fi

#
# determine a class and requestID
#
if [ "$class" == "auto" ]; then
    classPrefix=`echo $target | grep -E '^A_|^P_|^E_|^S_' | awk '{print substr($0,1,1)}'`
    case "$classPrefix" in
        "A" ) class="advanced" ;;
        "P" ) class="primary" ;;
        "E" ) class="entry" ;;
        "S" ) class="sample" ;;
    esac
    if [ -n "$classPrefix" ]; then
        requestID="`echo $target | sed -E 's/^.{1}_(.*).zip$/\1/'`" 
    else
        requestID="`echo $target | sed -E 's/^(.*).zip$/\1/'`" 
    fi
fi
if [ "$class" == "auto" ]; then
    case "$etclass" in
        "0" ) class="advanced" ;;
        "1" ) class="primary" ;;
        "2" ) class="entry" ;;
        "3" ) class="sample" ;;
         *  ) class="entry" ;;
    esac
fi
echo "race: $class class is selected."
# update JSON
case "$class" in
    "advanced" ) etclass="0"; classPrefix="A" ;;
    "primary"  ) etclass="1"; classPrefix="P" ;;
    "entry"    ) etclass="2"; classPrefix="E" ;;
    "sample"   ) etclass="3"; classPrefix="S" ;;
esac
settings=`echo $settings | jq ".etclass|=\"$etclass\"" | jq -c .`

#
# determine a course
#
if [ "$course" == "auto" ]; then
    if [ "$RHackEV" == "1" ]; then
        course="right"
    else
        course="left"
    fi
fi
echo "race: $course course is selected."
# update JSON
if [ "$course" == "right" ]; then
    coursePrefix="R"
    LHackEV="0"
    RHackEV="1"
else
    coursePrefix="L"
    LHackEV="1"
    RHackEV="0"
fi
settings=`echo $settings | jq ".LHackEV|=\"$LHackEV\"" | jq -c .`
settings=`echo $settings | jq ".RHackEV|=\"$RHackEV\"" | jq -c .`

#
# determine preferences for daemons
#
if [ "$mode" == "fp1" ] || [ "$mode" == "fp2" ] || [ "$mode" == "final" ]; then
    if [ "$mode" == "fp2" ] || [ "$mode" == "final" ]; then
        settings=`echo $settings | jq "del(.EnvLightIntensityLevel)" | jq -c .`
        settings=`echo $settings | jq "del(.EnvLightRotation)" | jq -c .`
        settings=`echo $settings | jq "del(.LSpotLight)" | jq -c .`
        settings=`echo $settings | jq "del(.RSpotLight)" | jq -c .`
        settings=`echo $settings | jq "del(.SponsorLogo_GroupA)" | jq -c .`
        settings=`echo $settings | jq "del(.SponsorLogo_GroupB)" | jq -c .`
        settings=`echo $settings | jq "del(.SponsorLogo_GroupC)" | jq -c .`
        settings=`echo $settings | jq "del(.SponsorLogo_PhysicMaterial)" | jq -c .`
    fi
    if [ "$mode" == "final" ]; then
        settings=`echo $settings | jq "del(.initLBlockLayout)" | jq -c .`
        settings=`echo $settings | jq "del(.initLNumberCase)" | jq -c .`
        settings=`echo $settings | jq "del(.initLNumberBlock)" | jq -c .`
        settings=`echo $settings | jq "del(.initRBlockLayout)" | jq -c .`
        settings=`echo $settings | jq "del(.initRNumberCase)" | jq -c .`
        settings=`echo $settings | jq "del(.initRNumberBlock)" | jq -c .`
        settings=`echo $settings | jq "del(.initLSlalom)" | jq -c .`
        settings=`echo $settings | jq "del(.initRSlalom)" | jq -c .`
        captureRate="1"
        forceShutdown="0"
    else
        captureRate="4"
        forceShutdown="1"
    fi
    rm -rf "$captureDir"
    if [ "$ETROBO_OS" == "win" ]; then
        captDir="$captureDir_winPath"
    else
        captDir="$captureDir"
    fi
    settings=`echo $settings | jq ".athrillHost|=\"127.0.0.1\"" | jq -c .`
    settings=`echo $settings | jq ".commTimeOutFlag|=\"1\"" | jq -c .`
    settings=`echo $settings | jq ".debugMonitorON|=\"0\"" | jq -c .`
    settings=`echo $settings | jq ".frameRateMode|=\"0\"" | jq -c .`
    settings=`echo $settings | jq ".frameRate|=\"60\"" | jq -c .`
    settings=`echo $settings | jq ".motorSound|=\"0\"" | jq -c .`
    settings=`echo $settings | jq ".captureRate|=\"$captureRate\"" | jq -c .`
    settings=`echo $settings | jq ".captureDir|=\"$captDir\"" | jq -c .`
    settings=`echo $settings | jq ".forceShutdown|=\"$forceShutdown\"" | jq -c .`
    settings=`echo $settings | jq ".Poles|=\"0\"" | jq -c .`

    if [ "$class" == "entry" ]; then
        settings=`echo $settings | jq ".EnvLightIntensityLevel|=\"3\"" | jq -c .`
        settings=`echo $settings | jq ".EnvLightRotation|=\"0\"" | jq -c .`
        settings=`echo $settings | jq ".LSpotLight|=\"0\"" | jq -c .`
        settings=`echo $settings | jq ".RSpotLight|=\"0\"" | jq -c .`
    fi
fi
echo $settings | jq -M . > __race/settings.json
echo "race: update settings.json: done."
echo

#
# file archiver: create zip file
#
if [ "$mode" == "zip" ] || [ "$mode" == "upload" ]; then
    # calc md5sum
    sum="`(find __race -type f -exec md5sum -b {} \; && find __race) | env LC_ALL=C sort | md5sum -b`"
    echo $sum > __race/__race.md5sum

    # zip it
    target="${classPrefix}_${target}"
    zip -r $target __race > /dev/null
    if [ "$?" == "0" ]; then
        echo "file archiver: archive succeed."
    else
        echo "file archiver: ARCHIVE ERROR"
        exit $ERR_ARC_ZIP_FAILED
    fi

    fileSize="`wc -c $target | awk '{print $1}'`"
    if [ $fileSize -gt 30000000 ]; then
        echo "file archiver: ARCHIVE ERROR: too large file ($fileSize bytes)"
        exit $ERR_ARC_ZIP_TOO_LARGE
    fi

    rm -f "$raceFolder/$target"
    cp -f "$target" "$raceFolder/"
    echo -n "file archiver: your '$target' file is stored in "
    if [ "$ETROBO_OS" == "win" ]; then
        winPath="`echo \"$raceFolder\" | sed -E 's/^\\/mnt\\///' | sed -E 's/^(.{1})/\\U&:/' | sed -E 's/\\//\\\\/g'`"
        echo "$winPath"
        cd "$raceFolder"
        cmd.exe /C "explorer $winPath"
    else
        echo "$raceFolder"
        if [ "$ETROBO_OS" == "mac" ]; then
            open "$raceFolder"
        fi
    fi
    if [ "$mode" = "zip" ]; then
        exit $exit_code
    fi
    echo "comming soon: upload mode"
else
    # launch sim
    echo "race sequencer: launch race on $course course"
    cd "$simdist/__race"
    sim $sim_ver $course btcat launch __race > console.log
    sim_error="$?"
    if [ "$sim_error" != "0" ] && [ "$sim_error" != "143" ];then
        echo "race sequencer: athrill app ERROR!!"
        exit $ERR_SEQ_SIM_LAUNCH_FAILED
    fi
    if [ -n "`sim check`" ]; then
        sim stop
    fi

    # prepare result folder
    echo "race sequencer: prepare result folder"
    dest=$coursePrefix`date "+%Y%m%d-%H%M%S"`
    result="$raceFolder/$dest"
    mkdir "$result"
    src="$captureDir/$coursePrefix.csv"
    if [ -f "$src" ]; then
        cp "$src" "$result/$dest.csv"
    fi
    src="console.log"
    if [ -f "$src" ]; then
        cp "$src" "$result/"
    fi
    src="__ev3rtfs"
    if [ -d "$src" ]; then
        cp -rf "$src" "$result/"
    fi
    src="bt.log"
    if [ -f "$src" ] && [ "`wc -c "$src" | awk '{print $1}'`" != "0" ]; then
        cp "$src" "$result/"
    fi

    # encode race video
    echo "race sequencer: encode race video"
    ffmpeg -r 15 -i "$captureDir/${coursePrefix}_%08d.png"  -vcodec libx264 -pix_fmt yuv420p -loglevel 8 "$result/$dest.mp4" 
    if [ "$?" != "0" ];then
        echo "race sequencer: ffmpeg encoding ERROR!!"
        exit_code=$ERR_SEQ_FFMPEG_FAILED
    fi

    # zip result files
    echo "race sequencer: zip result files"
    cd "$raceFolder"
    zip -r "Results/$target" $dest > /dev/null
    if [ "$?" != "0" ]; then
        echo "race sequencer: result file archive ERROR!!"
        exit $ERR_SEQ_ZIP_FAILED
    fi
    rm -rf $dest
    rm -rf "$simdist/__race"
    
    echo "race sequencer: race (requestID=$requestID) is finished successfully."
fi
exit $exit_code