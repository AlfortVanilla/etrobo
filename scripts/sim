#!/usr/bin/env bash
#
# sim, centralized simulator launcher/controller
#   sim 
# Author: jtFuruhata, mhikichi1969
# Copyright (c) 2020 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#
# for developer: Athrill2 launcher has been moved to `athrill_launcher/runner`

#
# `sim prefs` returns prefernces
# `sim export` writes preferences into settings.json at run time
#  (you should use `export launch` for export file into simdist/projName)
unset prefs
unset prefs_stop
if [ "$1" = "prefs" ] || [ "$1" = "export" ] || [ "$1" = "import" ]; then
    prefs="$1"
    shift
    if [ -z "`sim check sim`" ]; then
        prefs_stop="stop"
    fi
fi

# unset default envvars
if [ "$1" = "unset" ]; then
    unset ETROBO_SIM_VER
    unset ETROBO_SIM_DEV
    unset ETROBO_SIM_COMPANY
    unset ETROBO_SIM_NAME
    unset ETROBO_SIM_LOG
    unset ETROBO_SIM_DIST
    unset ETROBO_SIM_COMM
    unset ETROBO_LAUNCH_SIM
    . athrill_launcher unset
else
    # export default envvars
    export ETROBO_SIM_VER=`ls $ETROBO_ROOT/dist | grep ^etrobosim.*gz$ | sed -E "s/^etrobosim(.*)_.*.tar.gz/\1/" | tail -n 1`
    export ETROBO_SIM_DEV="UnityETroboSim"
    export ETROBO_SIM_COMPANY="ETロボコン実行委員会"
    export ETROBO_SIM_NAME="ETロボコンシミュレータ"
    export ETROBO_SIM_LOG="$ETROBO_SIM_COMPANY/$ETROBO_SIM_NAME/Player.log"
    if [ "$ETROBO_OS" = "win" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/AppData/LocalLow/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/.config/unity3d/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_OS" = "mac" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/Library/Logs/$ETROBO_SIM_LOG"
    else
        unset ETROBO_SIM_LOG
    fi
    export ETROBO_SIM_DIST="$ETROBO_HRP3_WORKSPACE/simdist"
    . athrill_launcher env

    # course select
    app_prefix=""
    app_select="l_app"
    sim_select="left"
    app_req='{"LHackEV":1,"RHackEV":0}'
    if [ "$1" = "l" ] || [ "$1" = "left" ]; then
        app_prefix="l_"
        shift
    elif [ "$1" = "r" ] || [ "$1" = "right" ]; then
        app_prefix="r_"
        app_select="r_app"
        sim_select="right"
        app_req='{"LHackEV":0,"RHackEV":1}'
        shift
    fi
    ip=`cat "$ETROBO_ATHRILL_CONFIG" | grep DEBUG_FUNC_VDEV_TX_IPADDR | sed -E "s/^DEBUG_FUNC_VDEV_TX_IPADDR[ \t]*([^ \t]*$)/\1/"`
    if [ -z "$ip" ]; then
        ip="localhost"
    fi
    export ETROBO_SIM_COMM="http://$ip:54000/"

    #
    # `ver [version]` option selects version of UnityETroboSim
    #
    if [ "$1" = "ver" ]; then
        export ETROBO_SIM_VER="$2"
        shift 2
    fi

    # set sim launcher script
    if [ "$ETROBO_OS" = "chrome" ]; then
        os="linux"
    else
        os="$ETROBO_OS"
    fi
    if [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_LAUNCH_SIM="\"${ETROBO_USERPROFILE}/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}/${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}\" &"
    elif [ "$ETROBO_KERNEL" = "darwin" ]; then
        export ETROBO_LAUNCH_SIM="open -a \"/Applications/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}${ETROBO_EXE_POSTFIX}\""
    else
        unset ETROBO_LAUNCH_SIM
    fi
fi

if [ "$1" != "env" ] && [ "$1" != "unset" ]; then
    #
    # `show` option shows full-path to UnityETroboSim
    #
    if [ "$1" = "show" ]; then
        shift
        echo $(eval echo "$ETROBO_LAUNCH_SIM")
    fi

    #
    # `sim check` command returns PID of sim,l_app and r_app
    # 
    if [ "$1" = "check" ]; then
        if [ "$ETROBO_OS" = "win" ]; then
            checker='tasklist.exe /FI "imagename eq ${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}" | grep ${ETROBO_SIM_NAME} | sed -E "s/^${ETROBO_SIM_NAME}(.*$)/\1/"'
        else
            checker='ps aux | grep -v grep | grep etrobosim'
        fi
        pid=$(eval $checker | awk '{print $2}')
        # check athrill app
        l_pid=`ps aux | grep -v grep | grep device_config.txt | awk '{print $2}'`
        r_pid=`ps aux | grep -v grep | grep device_config_r.txt | awk '{print $2}'`
        # check btcat
        bt_pid=`ps aux | grep -v grep | grep btcat | awk '{print $2}'`
        if [ -z "$bt_pid" ]; then
            bt_pid=`ps aux | grep -v grep | grep __ev3rt_bt_out | awk '{print $2}'`
        fi

        if [ -z "$2" ] || [ "$2" == "sim" ]; then
            echo $pid
        fi
        if [ "$2" == "bt" ]; then
            echo $bt_pid
        elif [ "$2" != "sim" ]; then
            if [ "$2" == "l_app" ]; then
                echo $l_pid
            elif [ "$2" == "r_app" ]; then
                echo $r_pid
            else
                echo "$l_pid:$r_pid"
            fi
        fi
        exit 0
    fi

    #
    # `sim status` shows status
    #
    if [ "$1" = "status" ]; then
        json=`curl -s -X GET $ETROBO_SIM_COMM 2>&1`
        if [ "$?" == "0" ];then
            echo "$json" | jq .
        fi
        exit 0
    fi

    #
    # `sim stop` command terminates sim, l_app and r_app
    #
    if [ "$1" = "stop" ]; then
        # stop UnityETroboSim
        if [ -z "$2" ] || [ "$2" == "sim" ]; then
            shift
            pid="`sim check sim`"
            while [ -n "$pid" ]; do
                if [ "$ETROBO_OS" = "win" ]; then
                    taskkill.exe /pid $pid >NUL 2>&1
                else
                    kill $pid
                fi
                sleep 0.1
                pid="`sim check sim`"
            done
        fi
        # stop athrill apps
        if [ -z "$2" ] || [ "$2" == "apps" ] || [ "$2" == "l_app" ]; then
            shift
            l_pid="`sim check l_app`"
            while [ -n "$l_pid" ]; do
                kill $l_pid
                sleep 0.1
                l_pid="`sim check l_app`"
            done
        fi
        if [ -z "$2" ] || [ "$2" == "apps" ] || [ "$2" == "r_app" ]; then
            shift
            r_pid="`sim check r_app`"
            while [ -n "$r_pid" ]; do
                kill $r_pid
                sleep 0.1
                r_pid="`sim check r_app`"
            done
        fi
        # stop btcat
        if [ -z "$2" ] || [ "$2" == "bt" ]; then
            shift
            bt_pid="`sim check bt`"
            while [ -n "$bt_pid" ]; do
                kill $bt_pid
                sleep 0.1
                bt_pid="`sim check bt`"
            done
        fi
        exit 0
    fi

    #
    # auto robot start and stop
    #
    # `sim launch` starts and stops on specified course automatically.
    # `sim manual launch` doesn't start and stop automatically, just old `sim launch`
    #
    auto_start="auto"
    if [ "$1" = "manual" ]; then
        shift
        unset auto_start
    fi

    # `sim unprefs` doesn't load preferences from settings.json
    load_prefs="load"
    if [ "$1" = "unprefs" ] || [ "$1" = "noset" ]; then
        shift
        unset load_prefs
    fi

    # `sim btcat` outputs Virtual BT into bt.log
    unset btcat
    if [ "$1" = "btcat" ]; then
        shift
        btcat="btcat"
    fi

    #
    # new procedure of launching athrill apps from `simdist`:
    #
    # new `sim launch` launches athrill apps from under the `workspace/simdist/[projName]` folder.
    # `sim launchws` launches athrill apps from under the `$ETROBO_ATHRILL_WS` folder, just old `sim launch`.
    #
    # $ETROBO_ATHRILL_WORKSPACE
    #   |- athrill2
    # $ETROBO_HRP3_WORKSPACE
    #   |- [simdist]
    #       |- [projName]
    #           |- log.txt
    #           |- l_projName.asp
    #           |- r_projName.asp
    #           |- settings.json
    #           |- __ev3rt_bt_in
    #           |- __ev3rt_bt_out
    #           |- [__ev3rtfs]
    #
    # `wait` option is no longer using, sim always wait for launch UnityETroboSim without `only launch[ws]`
    #
    # `sim launch [projName]` lanches both the UnityETroboSim and a Athrill app
    # `sim only launch [projName]` only lanches a Athrill app
    if [ "$1" = "wait" ]; then
        shift
    fi
    if [ "$1" = "only" ]; then
        sim_opt="only"
        shift
    else
        unset sim_opt
    fi

    if [ -z "$sim_opt" ]; then
        sim_opt="skipASP"
    fi
    target="dummy"

    # launch a athrill app at background
    if [ -n "$target" ]; then
        if [ "$sim_opt" != "skipASP" ]; then
            if [ "$sim_opt" == "only" ] && [ -z `sim check sim` ]; then
                ${athrill2} -c1 -m ${memory_txt} -d ${device_config_txt} -t -1 "$target"
                # execution will deadlock here. to terminate, user have to hit Ctrl+C key.
            else
                ${athrill2} -c1 -m ${memory_txt} -d ${device_config_txt} -t -1 "$target" &
            fi
        fi

        # launch btcat
        if [ -n "$btcat" ]; then
            btcat app=$projName bt.log &
        fi

        # thread terminator
        loop="loop"
        trap "unset loop; echo ' now terminating...'" SIGINT
        trap "unset loop; sim stop $app_select bt" EXIT

        # launch UnityETroboSim at background
        if [ "$sim_opt" != "only" ]; then
            if [ -z `sim check sim` ]; then
                if [ -f "$ETROBO_SIM_LOG" ]; then
                    mv -f "$ETROBO_SIM_LOG" "$(dirname "$ETROBO_SIM_LOG")/Player-prev.log"
                fi
                eval "$ETROBO_LAUNCH_SIM"
            fi
            # wait for starting up UnityETrobosim
            if [ "$ETROBO_SIM_VER" == "$ETROBO_PUBLIC_VER" ]; then
                hook="CONTROLLABLE"
                unset comm_ready
            else
                hook="UIHttpServer start"
                comm_ready="init"
            fi
            while [ -z "`cat "$ETROBO_SIM_LOG" 2>&1 | grep "$hook"`" ] && [ -n "$loop" ]; do
                sleep 0.1
            done
            if [ "$sim_opt" != "skipASP" ]; then
                echo "[ launcher: $hook detected ]"
            fi

            # wait for starting up UIcomm
            if [ "$comm_ready" == "init" ]; then
                response=`curl -s -X GET $ETROBO_SIM_COMM -w '\n%{http_code}\n'`
                json=`echo "$response" | sed '$d'`
                code=`echo "$response" | tail -n 1`
                while [ "$code" == "500" ] && [ -n "$loop" ]; do
                    sleep 0.1
                    response=`curl -s -X GET $ETROBO_SIM_COMM -w '\n%{http_code}\n'`
                    json=`echo "$response" | sed '$d'`
                    code=`echo "$response" | tail -n 1`
                done
                comm_ready="ready"
                if [ "$sim_opt" != "skipASP" ]; then
                    echo "[ launcher: connected to UIcomm ]"
                fi
            fi                

            # return or export prefs
            if [ -n "$prefs" ]; then
                invoker="curl -s -X GET ${ETROBO_SIM_COMM}?GET=PREFS | jq -M ."
                if [ "$prefs" == "export" ] || [ "$prefs" == "import" ]; then
                    eval "$invoker" > settings.json
                else
                    eval "$invoker"
                fi
                if [ "$prefs_stop" == "stop" ] && [ "$sim_opt" == "skipASP" ]; then
                    sim stop sim
                fi
            fi

            # load prefernces from settings.json
            if [ -n "$load_prefs" ] && [ -f settings.json ]; then
                req="`cat settings.json | jq -M -c .`"
                if [ -n "$req" ]; then
                    curl -s -X POST -d $req $ETROBO_SIM_COMM > /dev/null
                    sleep 1     # @ToDo: its magic number
                else
                    echo "[ launcher: WORNING: illegal settings.json ]"
                fi
            fi

            # exit if no launch
            if [ "$sim_opt" == "skipASP" ]; then
                exit 0
            fi

            if [ "$comm_ready" == "ready" ]; then
                rm -f result.json
                # put HackEV onto specified course and wait connected
                curl -s -X POST -d $app_req $ETROBO_SIM_COMM > /dev/null
                sleep 1     # @ToDo: its magic number
                counter=0
                response=`curl -s -X GET $ETROBO_SIM_COMM`
                while [ -z "`echo "$response" | jq -r .$sim_select.mode | grep CONNECTING`" ] && [ -n "$loop" ]; do
                    sleep 0.1
                    counter=$(( $counter + 1 ))
                    if [ $counter -ge 10 ]; then
                        echo "[ launcher: autostart sequence timeout before PREPARE ]"
                        unset loop
                    fi
                    response=`curl -s -X GET $ETROBO_SIM_COMM`
                done
                echo "[ launcher: ready to start on $sim_select course ]"

                # auto start sequence
                if [ "$ETROBO_SIM_VER" != "$ETROBO_PUBLIC_VER" ]; then
                    # request PREPARE and wait READY
                    echo "[ launcher: Go to the start, Ready? ]"
                    json=`curl -s -X GET $ETROBO_SIM_COMM?MEASUREMENT=PREPARE`
                    sleep 1     # @ToDo: its magic number
                    counter=0
                    while [ "`echo $json | jq -r .measurement.mode`" != "READY" ] && [ -n "$loop" ]; do
                        sleep 0.1
                        counter=$(( $counter + 1 ))
                        if [ $counter -ge 10 ]; then
                            echo "[ launcher: autostart sequence timeout after PREPARE ]"
                            unset loop
                        fi
                        json=`curl -s -X GET $ETROBO_SIM_COMM`
                    done
                    # auto start
                    echo -n "[ launcher: 3..."
                    sleep 1
                    echo -n "2..."
                    sleep 1
                    echo -n "1..."
                    sleep 1
                    if [ -n "$auto_start" ]; then
                        json=`curl -s -X GET $ETROBO_SIM_COMM?MEASUREMENT=GO`
                        echo " ]"
                        echo "[ launcher: Go!!!!!!!! ]"
                    else
                        echo "[ launcher: $sim_select: manual start ]"
                    fi
                fi
            else
                echo
                echo "*** WARNING ***"
                echo
                echo "You are *NOT* using the 'etrobosim$ETROBO_COMPETITION_VER' which is a simulator for competition."
                echo "If you are a participant, run 'update sim' to download it."
                echo
            fi
        fi

        # loop while UnityETroboSim is running
        unset start_gate
        unset gate1
        unset gate2
        unset goal
        start_time=`date "+%s"`
        while [ -n "$loop" ] && [ -n "`sim check sim`" ]; do
            sleep 0.1
            json=`curl -s -X GET $ETROBO_SIM_COMM`
            if [ -n "$json" ]; then
                if [ "`echo $json | jq -r .measurement.mode`" == "END" ]; then
                    echo "[ launcher: end of this race ]"
                    echo "$json" | jq . > result.json
                    unset loop
                fi

                # competition rules
                if [ -z "$start_gate" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.RUN_TIME`" != "0" ]; then
                    echo "[ launcher: $sim_select: passed Start Gate ]"
                    start_gate="passed"
                fi
                if [ -n "$start_gate" ] && [ -z "$gate1" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GATE1`" == "1" ]; then
                    echo "[ launcher: $sim_select: passed Gate 1 ]"
                    gate1="passed"
                fi
                if [ -n "$gate1" ] && [ -z "$gate2" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GATE2`" == "1" ]; then
                    echo "[ launcher: $sim_select: passed Gate 2 ]"
                    gate2="passed"
                fi
                if [ -n "$gate2" ] && [ -z "$goal" ] \
                && [ "`echo $json | jq -r .${sim_select}Measurement.GOAL`" == "1" ]; then
                    measurement_time=`echo $json | jq -r .${sim_select}Measurement.MEASUREMENT_TIME`
                    goal=`printf %04d $measurement_time | sed -E 's/^([0-9]*)([0-9]{3})$/\1\.\2/'`
                    echo "[ launcher: $sim_select: GOAL!  Goal Time: $goal ]"
                fi
            else
                unset loop
            fi
            if [ $((`date "+%s"` - start_time)) -gt 600 ] && [ -n "$auto_start" ]; then
                echo "[ launcher: past 10 minute from `date --date=@$start_time`. ]"
                unset loop
            fi
        done
    fi
fi
