#!/usr/bin/env bash
#
# sim, centralized simulator launcher/controller
#   sim 
# Author: jtFuruhata, mhikichi1969
# Copyright (c) 2020 ETロボコン実行委員会, Released under the MIT license
# See LICENSE
#

# default filenames for launcher
athrill2="$ETROBO_ATHRILL_WORKSPACE/athrill2"
memory_txt="$ETROBO_ATHRILL_SDK/common/memory.txt"
device_config_path="$ETROBO_ATHRILL_SDK/common"
target="$ETROBO_ATHRILL_WORKSPACE/asp"

# unset default envvars
if [ "$1" = "unset" ]; then
    unset ETROBO_SIM_VER
    unset ETROBO_SIM_DEV
    unset ETROBO_SIM_COMPANY
    unset ETROBO_SIM_NAME
    unset ETROBO_SIM_LOG
    unset ETROBO_SIM_COMM
    unset ETROBO_LAUNCH_ASP
    unset ETROBO_LAUNCH_SIM
else
    # export default envvars
    export ETROBO_SIM_VER=`ls $ETROBO_ROOT/dist | grep ^etrobosim.*gz$ | sed -E "s/^etrobosim(.*)_.*.tar.gz/\1/" | tail -n 1`
    export ETROBO_SIM_DEV="UnityETroboSim"
    export ETROBO_SIM_COMPANY="ETロボコン実行委員会"
    export ETROBO_SIM_NAME="ETロボコンシミュレータ"
    export ETROBO_SIM_LOG="$ETROBO_SIM_COMPANY/$ETROBO_SIM_NAME/Player.log"
    if [ "$ETROBO_OS" = "win" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/AppData/LocalLow/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/.config/unity3d/$ETROBO_SIM_LOG"
    elif [ "$ETROBO_OS" = "mac" ]; then
        export ETROBO_SIM_LOG="$ETROBO_USERPROFILE/Library/Logs/$ETROBO_SIM_LOG"
    else
        unset ETROBO_SIM_LOG
    fi

    # search & select a path to device_config.txt
    # select priority: 
    # 1. $ETROBO_HRP3_WORKSPACE/etroboc_common
    # 2. $ETROBO_ATHRILL_WORKSPACE/etroboc_common
    # 3. $ETROBO_ATHRILL_SDK/common
    if [ -f "$ETROBO_HRP3_WORKSPACE/etroboc_common/device_config.txt" ]; then
        device_config_path="$ETROBO_HRP3_WORKSPACE/etroboc_common"
    elif [ -f "$ETROBO_ATHRILL_WORKSPACE/etroboc_common/device_config.txt" ]; then
        device_config_path="$ETROBO_ATHRILL_WORKSPACE/etroboc_common"
    fi
    device_config_txt="$device_config_path/device_config.txt"

    app_prefix=""
    app_select="l_app"
    app_req='{"LHackEV":1}'
    if [ "$1" = "l" ] || [ "$1" = "left" ]; then
        app_prefix="l_"
        shift
    elif [ "$1" = "r" ] || [ "$1" = "right" ]; then
        app_prefix="r_"
        app_select="r_app"
        app_req='{"RHackEV":1}'
        device_config_txt="$device_config_path/device_config_r.txt"
        shift
    fi
    ip=`cat "$device_config_txt" | grep DEBUG_FUNC_VDEV_TX_IPADDR | sed -E "s/^DEBUG_FUNC_VDEV_TX_IPADDR[ \t]*([^ \t]*$)/\1/"`
    if [ -z "$ip" ]; then
        ip="localhost"
    fi
    export ETROBO_SIM_COMM="http://$ip:54000/"
    export ETROBO_LAUNCH_ASP="${athrill2} -c1 -m ${memory_txt} -d ${device_config_txt} -t -1 ${target}"


    if [ "$1" = "ver" ]; then
        export ETROBO_SIM_VER="$2"
        shift 2
    fi

    if [ "$ETROBO_OS" = "chrome" ]; then
        os="linux"
    else
        os="$ETROBO_OS"
    fi
    if [ "$ETROBO_KERNEL" = "debian" ]; then
        export ETROBO_LAUNCH_SIM='"${ETROBO_USERPROFILE}/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}/${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}" &'
    elif [ "$ETROBO_KERNEL" = "darwin" ]; then
        export ETROBO_LAUNCH_SIM='open -a "/Applications/etrobosim/etrobosim${ETROBO_SIM_VER}_${os}${ETROBO_EXE_POSTFIX}"'
    else
        unset ETROBO_LAUNCH_SIM
    fi
fi

if [ "$1" != "env" ] && [ "$1" != "unset" ]; then
    if [ "$1" = "show" ]; then
        shift
        echo $(eval echo "$ETROBO_LAUNCH_SIM")
    fi
    if [ "$1" = "check" ]; then
        # check UnityETroboSim
        if [ "$ETROBO_OS" = "win" ]; then
            checker='tasklist.exe /FI "imagename eq ${ETROBO_SIM_NAME}${ETROBO_EXE_POSTFIX}" | grep ${ETROBO_SIM_NAME} | sed -E "s/^${ETROBO_SIM_NAME}(.*$)/\1/"'
        else
            checker='ps aux | grep -v grep | grep etrobosim'
        fi
        pid=$(eval $checker | awk '{print $2}')
        # check athrill app
        l_pid=`ps aux | grep -v grep | grep device_config.txt | awk '{print $2}'`
        r_pid=`ps aux | grep -v grep | grep device_config_r.txt | awk '{print $2}'`

        if [ "$2" != "apps" ] && [ "$2" != "l_app" ] && [ "$2" != "r_app" ]; then
            echo $pid
        fi
        if [ "$2" != "sim" ]; then
            if [ "$2" == "l_app" ]; then
                echo $l_pid
            elif [ "$2" == "r_app" ]; then
                echo $r_pid
            else
                echo "$l_pid:$r_pid"
            fi
        fi
        exit 0
    fi
    if [ "$1" = "stop" ]; then
        # stop UnityETroboSim
        if [ "$2" != "apps" ] && [ "$2" != "l_app" ] && [ "$2" != "r_app" ]; then
            pid=`sim check sim`
            while [ -n "$pid" ]; do
                if [ "$ETROBO_OS" = "win" ]; then
                    taskkill.exe /pid $pid > /dev/null
                else
                    kill $pid
                fi
                sleep 0.1
                pid=`sim check sim`
            done
        fi
        # stop athrill apps
        if [ "$2" != "sim" ]; then
            l_pid=`sim check l_app`
            while [ -n "$l_pid" ]; do
                kill $l_pid
                sleep 0.1
                l_pid=`sim check l_app`
            done
            r_pid=`sim check r_app`
            while [ -n "$r_pid" ]; do
                kill $r_pid
                sleep 0.1
                r_pid=`sim check r_app`
            done
        fi
        exit 0
    fi

    # `wait` option is no longer using, sim always wait for launch UnityETroboSim
    unset sim_opt
    if [ "$1" = "wait" ]; then
        sim_opt="wait"
        shift
    elif [ "$1" = "only" ]; then
        sim_opt="only"
        shift
    elif [ "$1" = "auto" ]; then
        sim_opt="auto"
        shift
    else
        unset sim_opt
    fi

    #
    # the directory structure for new launchDist procedure:
    # `sim` launches athrill apps from under the `workspace/[projName]/simdist` folder.
    #
    # $ETROBO_ATHRILL_WORKSPACE
    #   |- athrill2
    # $ETROBO_HRP3_WORKSPACE
    #   |- [projName]
    #       |- [simdist]
    #           |- log.txt
    #           |- l_projName.asp
    #           |- r_projName.asp
    #           |- settings.json
    #           |- __ev3rt_bt_in
    #           |- __ev3rt_bt_out
    #           |- [__ev3rtfs]
    #
    unset target
    if [ "$1" = "launch" ]; then
        if [ -f "$ETROBO_ATHRILL_WORKSPACE/currentasp" ]; then
            target=`cat "$ETROBO_ATHRILL_WORKSPACE/currentasp"`
        fi
        if [ -n "$2" ]; then
            target="$2"
        fi
        echo "$target" > "$ETROBO_ATHRILL_WORKSPACE/currentasp"
        target="$ETROBO_ATHRILL_WORKSPACE/$target"
    elif [ "$1" = "launchDist" ]; then
        cd "$ETROBO_HRP3_WORKSPACE"
        projName="$2"
        if [ -z "$projName" ] && [ -f currentapp ]; then
            currentapp=`head -n 1 currentapp`
            projName=`echo $currentapp | sed -E "s/^app=|img=(.*)$/\1/"`
        fi
        cd "$projName/simdist"
        target="${app_prefix}${projName}.asp"
    elif [ -z "$sim_opt" ]; then
        sim_opt="skipASP"
        target="dummy"
    fi

    # launch a athrill app at background
    if [ -n "$target" ]; then
        if [ "$sim_opt" != "skipASP" ]; then
            ${athrill2} -c1 -m ${memory_txt} -d ${device_config_txt} -t -1 "$target" &
        fi

        loop="loop"
        trap "echo ' now terminating...'; unset loop" SIGINT

        # launch UnityETroboSim at background
        if [ "$sim_opt" != "only" ]; then
            if [ -z `sim check sim` ]; then
                if [ -f "$ETROBO_SIM_LOG" ]; then
                    mv -f "$ETROBO_SIM_LOG" "$(dirname $ETROBO_SIM_LOG)/Player-prev.log"
                fi
                eval "$ETROBO_LAUNCH_SIM"
            fi
            if [ "$ETROBO_SIM_VER" == "2020_0.992" ]; then
                hook="CONTROLLABLE"
                unset comm_ready
            else
                hook="UIHttpServer start"
                comm_ready="Ready"
            fi
            while [ -z "`cat "$ETROBO_SIM_LOG" 2>&1 | grep "$hook"`" ]; do
                sleep 0.1
            done
            if [ "$sim_opt" == "skipASP" ]; then
                exit 0
            fi
            sleep 1
            if [ -n "$comm_ready" ]; then
                if [ -n "`curl -s -X GET $ETROBO_SIM_COMM | jq -r .[].mode | grep CONTROLLABLE`" ]; then
                    curl -s -X POST -d $app_req $ETROBO_SIM_COMM > /dev/null
                fi
            fi

            # loop while UnityETroboSim is running
            while [ -n "`sim check sim`" ] && [ -n "$loop" ]; do
                sleep 0.1
            done
        fi

        sim stop $app_select
    fi
fi
